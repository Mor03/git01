{
  "uid" : "1a41b03c88537016",
  "name" : "查询用户信息",
  "fullName" : "test.test_api.TestApiAuto#test_main",
  "historyId" : "a61f52afbea94c94eb0c7e620fe14df2",
  "time" : {
    "start" : 1617946316181,
    "stop" : 1617946316220,
    "duration" : 39
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'msg': '用户ID...'status': 400} == {'msg': '获取成功', 'status': 200}\n  Differing items:\n  {'msg': '用户ID必须是数字'} != {'msg': '获取成功'}\n  {'status': 400} != {'status': 200}\n  Use -v to get the full diff",
  "statusTrace" : "self = <test.test_api.TestApiAuto object at 0x00000230DACD0FA0>\ncase_number = 'case_006_1', case_title = '查询用户信息', path = 'users'\nis_token = '读', method = 'get', parametric_key = 'params', file_var = ''\nfile_path = '', parameters = '/{\"case_005\":\"$.data.id\"}', dependent = ''\ndata = None, expect = {'msg': '获取成功', 'status': 200}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            # return data(原始请求数据), header, parameters_path_url（解析依赖的数据）\n            data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data,\n                                                                         save_response_dict)\n            #allure报告还支持显示许多不同类型的附件，可以补充测试结果\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url, ensure_ascii=False, indent=4), \"最终请求地址\",\n                          allure.attachment_type.TEXT)\n            res = br.base_requests(method=method, url=base_url + path + parameters_path_url,\n                                   parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            save_response_dict.save_actual_response(case_key=case_number, case_response=res)\n            allure.attach(json.dumps(save_response_dict.actual_response, ensure_ascii=False, indent=4), \"实际响应字典\",\n                          allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的，前面先提取再判断\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    # $.data.token\n                    treat_data.token_header['Authorization'] = jsonpath.jsonpath(res, token_reg)[0]  #字典\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\",\n                          allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\",\n                          allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': '用户ID...'status': 400} == {'msg': '获取成功', 'status': 200}\nE             Differing items:\nE             {'msg': '用户ID必须是数字'} != {'msg': '获取成功'}\nE             {'status': 400} != {'status': 200}\nE             Use -v to get the full diff\n\ntest_api.py:155: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'msg': '用户ID...'status': 400} == {'msg': '获取成功', 'status': 200}\n  Differing items:\n  {'msg': '用户ID必须是数字'} != {'msg': '获取成功'}\n  {'status': 400} != {'status': 200}\n  Use -v to get the full diff",
    "statusTrace" : "self = <test.test_api.TestApiAuto object at 0x00000230DACD0FA0>\ncase_number = 'case_006_1', case_title = '查询用户信息', path = 'users'\nis_token = '读', method = 'get', parametric_key = 'params', file_var = ''\nfile_path = '', parameters = '/{\"case_005\":\"$.data.id\"}', dependent = ''\ndata = None, expect = {'msg': '获取成功', 'status': 200}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            # return data(原始请求数据), header, parameters_path_url（解析依赖的数据）\n            data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data,\n                                                                         save_response_dict)\n            #allure报告还支持显示许多不同类型的附件，可以补充测试结果\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url, ensure_ascii=False, indent=4), \"最终请求地址\",\n                          allure.attachment_type.TEXT)\n            res = br.base_requests(method=method, url=base_url + path + parameters_path_url,\n                                   parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            save_response_dict.save_actual_response(case_key=case_number, case_response=res)\n            allure.attach(json.dumps(save_response_dict.actual_response, ensure_ascii=False, indent=4), \"实际响应字典\",\n                          allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的，前面先提取再判断\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    # $.data.token\n                    treat_data.token_header['Authorization'] = jsonpath.jsonpath(res, token_reg)[0]  #字典\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\",\n                          allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\",\n                          allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': '用户ID...'status': 400} == {'msg': '获取成功', 'status': 200}\nE             Differing items:\nE             {'msg': '用户ID必须是数字'} != {'msg': '获取成功'}\nE             {'status': 400} != {'status': 200}\nE             Use -v to get the full diff\n\ntest_api.py:155: AssertionError",
    "steps" : [ {
      "name" : "处理相关数据依赖，header",
      "time" : {
        "start" : 1617946316181,
        "stop" : 1617946316183,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c3f6a5eed8750246",
        "name" : "请求头",
        "source" : "c3f6a5eed8750246.txt",
        "type" : "text/plain",
        "size" : 186
      }, {
        "uid" : "84eb9424f4a51caf",
        "name" : "请求数据",
        "source" : "84eb9424f4a51caf.txt",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "发送请求，取得响应结果的json串",
      "time" : {
        "start" : 1617946316183,
        "stop" : 1617946316217,
        "duration" : 34
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d35973aa923177f",
        "name" : "最终请求地址",
        "source" : "d35973aa923177f.txt",
        "type" : "text/plain",
        "size" : 78
      }, {
        "uid" : "153431ca75b9c2d3",
        "name" : "实际响应",
        "source" : "153431ca75b9c2d3.txt",
        "type" : "text/plain",
        "size" : 105
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "将响应结果的内容写入实际响应字典中",
      "time" : {
        "start" : 1617946316217,
        "stop" : 1617946316218,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "35e9e5485e64ffeb",
        "name" : "实际响应字典",
        "source" : "35e9e5485e64ffeb.txt",
        "type" : "text/plain",
        "size" : 5434
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "根据配置文件的提取响应规则提取实际数据",
      "time" : {
        "start" : 1617946316218,
        "stop" : 1617946316218,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6c0793ed53c7239",
        "name" : "提取用于断言的实际响应部分数据",
        "source" : "6c0793ed53c7239.txt",
        "type" : "text/plain",
        "size" : 59
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "处理读取出来的预期结果响应",
      "time" : {
        "start" : 1617946316218,
        "stop" : 1617946316219,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "164f0c3d122efdb6",
        "name" : "预期响应",
        "source" : "164f0c3d122efdb6.txt",
        "type" : "text/plain",
        "size" : 48
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "预期结果与实际响应进行断言操作",
      "time" : {
        "start" : 1617946316219,
        "stop" : 1617946316219,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert {'msg': '用户ID...'status': 400} == {'msg': '获取成功', 'status': 200}\n  Differing items:\n  {'msg': '用户ID必须是数字'} != {'msg': '获取成功'}\n  {'status': 400} != {'status': 200}\n  Use -v to get the full diff\n",
      "statusTrace" : "  File \"D:\\zy7y-apiAutoTest-version1.0\\apiAutoTest\\test\\test_api.py\", line 155, in test_main\n    assert really == expect\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c721a34ae595ec88",
        "name" : "测试结果",
        "source" : "c721a34ae595ec88.txt",
        "type" : "text/plain",
        "size" : 5
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "4ff006b9e0a4f2e",
      "name" : "stderr",
      "source" : "4ff006b9e0a4f2e.txt",
      "type" : "text/plain",
      "size" : 5310
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 6
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestApiAuto"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UVHS0AF"
  }, {
    "name" : "thread",
    "value" : "10112-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_number",
    "value" : "'case_006_1'"
  }, {
    "name" : "case_title",
    "value" : "'查询用户信息'"
  }, {
    "name" : "data",
    "value" : "''"
  }, {
    "name" : "dependent",
    "value" : "''"
  }, {
    "name" : "expect",
    "value" : "' {\"msg\": \"获取成功\", \"status\": 200}'"
  }, {
    "name" : "file_path",
    "value" : "''"
  }, {
    "name" : "file_var",
    "value" : "''"
  }, {
    "name" : "is_token",
    "value" : "'读'"
  }, {
    "name" : "method",
    "value" : "'get'"
  }, {
    "name" : "parameters",
    "value" : "'/{\"case_005\":\"$.data.id\"}'"
  }, {
    "name" : "parametric_key",
    "value" : "'params'"
  }, {
    "name" : "path",
    "value" : "'users'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1a41b03c88537016.json",
  "parameterValues" : [ "'case_006_1'", "'查询用户信息'", "''", "''", "' {\"msg\": \"获取成功\", \"status\": 200}'", "''", "''", "'读'", "'get'", "'/{\"case_005\":\"$.data.id\"}'", "'params'", "'users'" ]
}