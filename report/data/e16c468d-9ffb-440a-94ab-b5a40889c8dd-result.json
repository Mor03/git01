{"name": "添加用户2正常接口数据", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '用户名已...'status': 400} == {'msg': '创建成功', 'status': 201}\n  Differing items:\n  {'msg': '用户名已存在'} != {'msg': '创建成功'}\n  {'status': 400} != {'status': 201}\n  Use -v to get the full diff", "trace": "self = <test.test_api.TestApiAuto object at 0x00000230DACD0670>\ncase_number = 'case_010', case_title = '添加用户2正常接口数据', path = 'users'\nis_token = '读', method = 'post', parametric_key = 'data', file_var = ''\nfile_path = '', parameters = '', dependent = ''\ndata = {'password': '123456', 'username': 'mor01'}\nexpect = {'msg': '创建成功', 'status': 201}\n\n    @pytest.mark.parametrize('case_number,case_title,path,is_token,method,parametric_key,file_var,'\n                             'file_path, parameters, dependent,data,expect', data_list)\n    def test_main(self, case_number, case_title, path, is_token, method, parametric_key, file_var,\n                  file_path, parameters, dependent, data, expect):\n    \n        # 感谢：https://www.cnblogs.com/yoyoketang/p/13386145.html，提供动态添加标题的实例代码\n        # 动态添加标题\n        allure.dynamic.title(case_title)\n    \n        logger.debug(f'⬇️⬇️⬇️...执行用例编号:{case_number}...⬇️⬇️⬇️️')\n        with allure.step(\"处理相关数据依赖，header\"):\n    \n            # return data(原始请求数据), header, parameters_path_url（解析依赖的数据）\n            data, header, parameters_path_url = treat_data.treating_data(is_token, parameters, dependent, data,\n                                                                         save_response_dict)\n            #allure报告还支持显示许多不同类型的附件，可以补充测试结果\n            allure.attach(json.dumps(header, ensure_ascii=False, indent=4), \"请求头\", allure.attachment_type.TEXT)\n            allure.attach(json.dumps(data, ensure_ascii=False, indent=4), \"请求数据\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"发送请求，取得响应结果的json串\"):\n            allure.attach(json.dumps(base_url + path + parameters_path_url, ensure_ascii=False, indent=4), \"最终请求地址\",\n                          allure.attachment_type.TEXT)\n            res = br.base_requests(method=method, url=base_url + path + parameters_path_url,\n                                   parametric_key=parametric_key, file_var=file_var, file_path=file_path,\n                                   data=data, header=header)\n            allure.attach(json.dumps(res, ensure_ascii=False, indent=4), \"实际响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"将响应结果的内容写入实际响应字典中\"):\n            save_response_dict.save_actual_response(case_key=case_number, case_response=res)\n            allure.attach(json.dumps(save_response_dict.actual_response, ensure_ascii=False, indent=4), \"实际响应字典\",\n                          allure.attachment_type.TEXT)\n    \n            # 写token的接口必须是要正确无误能返回token的，前面先提取再判断\n            if is_token == '写':\n                with allure.step(\"从登录后的响应中提取token到header中\"):\n                    # $.data.token\n                    treat_data.token_header['Authorization'] = jsonpath.jsonpath(res, token_reg)[0]  #字典\n    \n        with allure.step(\"根据配置文件的提取响应规则提取实际数据\"):\n            really = jsonpath.jsonpath(res, res_reg)[0]\n            allure.attach(json.dumps(really, ensure_ascii=False, indent=4), \"提取用于断言的实际响应部分数据\",\n                          allure.attachment_type.TEXT)\n    \n        with allure.step(\"处理读取出来的预期结果响应\"):\n            # 处理预期结果数据中使用True/False/None导致的无法转换bug\n            if 'None' in expect:\n                expect = expect.replace('None', 'null')\n            if 'True' in expect:\n                expect = expect.replace('True', 'true')\n            if 'False' in expect:\n                expect = expect.replace('False', 'false')\n            expect = json.loads(expect)\n            allure.attach(json.dumps(expect, ensure_ascii=False, indent=4), \"预期响应\", allure.attachment_type.TEXT)\n    \n        with allure.step(\"预期结果与实际响应进行断言操作\"):\n            logger.info(f'完整的json响应: {res}\\n需要校验的数据字典: {really} 预期校验的数据字典: {expect} \\n测试结果: {really == expect}')\n            logger.debug(f'⬆⬆⬆...用例编号:{case_number},执行完毕,日志查看...⬆⬆⬆\\n\\n️')\n            allure.attach(json.dumps(really == expect, ensure_ascii=False, indent=4), \"测试结果\",\n                          allure.attachment_type.TEXT)\n>           assert really == expect\nE           AssertionError: assert {'msg': '用户名已...'status': 400} == {'msg': '创建成功', 'status': 201}\nE             Differing items:\nE             {'msg': '用户名已存在'} != {'msg': '创建成功'}\nE             {'status': 400} != {'status': 201}\nE             Use -v to get the full diff\n\ntest_api.py:155: AssertionError"}, "steps": [{"name": "处理相关数据依赖，header", "status": "passed", "attachments": [{"name": "请求头", "source": "32c86394-2fdb-4bca-ab14-abef6f49150b-attachment.txt", "type": "text/plain"}, {"name": "请求数据", "source": "de59e7da-a64a-405b-8c12-c8e32f399400-attachment.txt", "type": "text/plain"}], "start": 1617946316508, "stop": 1617946316509}, {"name": "发送请求，取得响应结果的json串", "status": "passed", "attachments": [{"name": "最终请求地址", "source": "a5f887e4-514e-4f2d-b3dc-71c3c0e61357-attachment.txt", "type": "text/plain"}, {"name": "实际响应", "source": "7a05561f-b9d1-4e97-823d-8704e323aa71-attachment.txt", "type": "text/plain"}], "start": 1617946316509, "stop": 1617946316540}, {"name": "将响应结果的内容写入实际响应字典中", "status": "passed", "attachments": [{"name": "实际响应字典", "source": "5727dbd5-697f-42e2-bd85-33b8af077e4f-attachment.txt", "type": "text/plain"}], "start": 1617946316540, "stop": 1617946316542}, {"name": "根据配置文件的提取响应规则提取实际数据", "status": "passed", "attachments": [{"name": "提取用于断言的实际响应部分数据", "source": "615af6c7-4ce4-4c2d-8a16-1b804c2db517-attachment.txt", "type": "text/plain"}], "start": 1617946316542, "stop": 1617946316542}, {"name": "处理读取出来的预期结果响应", "status": "passed", "attachments": [{"name": "预期响应", "source": "1a39260b-7dad-45f3-a4f0-0d5fd054da7b-attachment.txt", "type": "text/plain"}], "start": 1617946316542, "stop": 1617946316542}, {"name": "预期结果与实际响应进行断言操作", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'msg': '用户名已...'status': 400} == {'msg': '创建成功', 'status': 201}\n  Differing items:\n  {'msg': '用户名已存在'} != {'msg': '创建成功'}\n  {'status': 400} != {'status': 201}\n  Use -v to get the full diff\n", "trace": "  File \"D:\\zy7y-apiAutoTest-version1.0\\apiAutoTest\\test\\test_api.py\", line 155, in test_main\n    assert really == expect\n"}, "attachments": [{"name": "测试结果", "source": "ee3697ef-682f-4bf1-b219-f42c9b141f51-attachment.txt", "type": "text/plain"}], "start": 1617946316542, "stop": 1617946316543}], "attachments": [{"name": "stderr", "source": "288dfc47-2496-41a3-bcba-123b1c3cd20f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_number", "value": "'case_010'"}, {"name": "case_title", "value": "'添加用户2正常接口数据'"}, {"name": "path", "value": "'users'"}, {"name": "is_token", "value": "'读'"}, {"name": "method", "value": "'post'"}, {"name": "parametric_key", "value": "'data'"}, {"name": "file_var", "value": "''"}, {"name": "file_path", "value": "''"}, {"name": "parameters", "value": "''"}, {"name": "dependent", "value": "''"}, {"name": "data", "value": "'{\"username\": \"mor01\",\"password\": \"123456\"}'"}, {"name": "expect", "value": "'{\"msg\":\"创建成功\",\"status\":201}'"}], "start": 1617946316507, "stop": 1617946316543, "uuid": "fbbe2e9e-2e64-468b-9f3d-c434fc59aaec", "historyId": "a1b9f85f2a5ba8dcc39d639573d5fa17", "testCaseId": "c2b13641bbced8035cf0282bfb1839e4", "fullName": "test.test_api.TestApiAuto#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApiAuto"}, {"name": "host", "value": "DESKTOP-UVHS0AF"}, {"name": "thread", "value": "10112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}